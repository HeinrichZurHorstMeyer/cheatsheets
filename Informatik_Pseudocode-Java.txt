##### Bedingungen #####
	Pseudocode:
		denk dir was aus.

	Java:
		Zahlenwerte vergleichen:
			x < 10 	wahr für alles kleiner als 10
			x <= 10 wahr für alles kleiner als 10 und 10
			x == 10 nur wahr für 10
			x >= 10 wahr für alles größer als 10 und 10
			x > 10	wahr für alles größer als 10
		
		Booleanwerte vergleichen:
			true	immer wahr
			false	nie wahr
		
		Strings und chars vergleichen:
			x == "text"	nur wahr, wenn x eine Variable des Typs String ist und exakt den Text "text" enthält. (Anführungszeichen sind zwingend)
			x == 's'	nur wahr, wenn x eine Variable des Typs Char ist und das Zeichen 's' enthält. (einzelnes Anführungszeichen zwingend)

			
##### Verzweigungen #####
	Pseudocode:
 		Wenn Bedingung:
			Auszuführender Block
		Sonst
			Alternativer Block

	Java:
		if ( Bedingung ) {
			if-Block
		} else {
			else-Block
		}
	
	### Javabeispiel ###
	x ist ein ganzzahliger Wert (int).
	Wenn x 10 ist, soll ist10() ausgeführt werden.
	Sonst soll nicht10() ausgeführt werden.

	if ( x == 10 ) {
		ist10();
	} else {
		nicht10();
	}

##### Schleife #####
	### Grundstruktur ###
		Pseudocode:
			Schleifenart Schleifenkopf:
				Schleifenkörper
		
		Java:
			Schleifenart (Schleifenkopf) {
				Schleifenkörper
			}
	
	### while ###
		Pseudocode:
			bis Bedingung:
				auszuführender Block

		Java:
			while ( Bedingung ) {
				while-Block
			}

		# Javabeispiel #
			So lange wie der wahr-/falsch-Wert (bool) test wahr ("true) ist, soll die Funktion istWahr() ausgeführt werden.

			while (test) {
				istWahr()
			}

	### for ###
		Pseudocode:
			?

		Java:
			for (Initialisierungswert; Bedingung; Incrementierung) {
				for-Block
			}

		# Javabeispiel #
			Die Funktion f(x) soll 10 mal ausgeführt werden mit x = alle Werte von 0 bis 9.

			for ( int i = 0; i < 10; i++ ) {
				// Der Block wird zu erst mit i = 0 ausgeführt, dann i = 1 ... und zu letzt i = 9.
				f(i);
				// Jedes mal, wenn das Ende des if-Blocks erreicht wird wird die Bedingung geprüft. Wenn sie nicht wahr ist, wird die Schleife beendet.
			}

##### Methoden / Funktionen #####
	Ich verwende beide Begriffe austauschbar, kein Plan ob es irgendeinen Unterschied gibt.
	Funktionen können einen Wert zurückgeben, der "Returnwert". Dieser kann von einer beliebigen Variablenart (eigentlich Variablenklasse) (siehe Informatik_Java-Variablen.csv.) sein. Die Variablenklasse muss als Returntype angegeben werden. (Bsp. int, float, string, char, void ...)
	Soll keine Variable zurückgegeben werden, verwendet man "void" als Returntype.

	### Pseudocode ###
		?
	
	### Java ###
		// der Funktionsname ist beliebig, es ist gerne gesehen, wenn man Funktions- und Variablennamen mit einem kleinen Buchstaben beginnt.
		
		Returntyp Funktionsname(Parameterklasse Parametername, ...) {
			Funktionsblock
			return Returnvariable;
			// die letzte Zeile kann bei dem Returntype "void" weggelassen werden.
		}

	# Javabeispiele #
		Eine Funktion soll "definiert" werden, die eine Funktion namens "vor()" drei mal ausführt und danach den Text "Ich bin da" ausführt.
		Sie soll keinen Wert zurück geben.

		void laufen() {
			for ( int i = 0; i < 3; i++) {
				vor();
			}

			// System.out.println() ist einfach nur eine Funktion die in Standard Java einen String in die Konsole ausgeben kann.
			System.out.println("Ich bin da".)
		}

		Eine Funktion soll definiert werden, die zwei gazzahlige Werte dividiert. Sie soll das Ergebnis als ein "float" wert zurückgeben.

		float division(int zaehler, int nenner) {
			float ergebnis = zaehler / nenner;
			return ergebnis.
		}
