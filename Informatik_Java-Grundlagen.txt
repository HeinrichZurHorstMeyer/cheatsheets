##### grundlegende Syntax #####
	generell:
		Eine Dezimalstelle wird nicht wie in Deutschland üblich mit einem ',' gekennzeichnet, sondern mit einem '.'. (Bsp. Dtl: 1,3 Java: 1.3)
		Es ist nur notwendig eine neue Zeile zu beginnen, um einen "//" Kommentar zu beenden, zur übersichtlichkeit sollte jedoch bspw. nach jedem ';' eine neue Zeile beginnen.

	grundlegend jeder Ausdruck:
		Ausdruck;
	
	Variablen deklarieren:
		Variablenklasse Variablenname = Wert;
	
	Funktion aufrufen / ausführen:
		Funktionsname(Parameter);

	Kommentar:
		// <- Ab diesem Symbol gilt die gesamte Zeile als Kommentar. Dieser hat keinen Einfluss auf das Programm.
		/* Der hier eingegrenzte Teil gilt als Kommentar. Nach dem folgenden Zeichen gilt die Zeile nicht mehr als Kommentar. */
		/*	Diese Art Kommentar kann
		 	über mehrere Zeilen
			gehen.
		 */
		// Kommentare sollten verwendet werden, damit man auch später noch weiß was der Code wo tut. (Dokumentier deineen Scheiß.)

##### Variablen #####
	Variablen sind Einheiten in denen je nach Klasse eine bestimmte Art Wert gespeichert werden kann.
	Solte eine Variable mit dem sleben Namen deklariert werden wie bereits eine existiert, so wird die ältere überschrieben.
	Die "Lebensdauer" einer Variable ist durch das Ende des Blocks in dem sie deklariert wird begrenzt. Danach wird sie "gelöscht".

	Deklarierung / Definition:
		Eine Variable muss deklariert werden, bevor sie anderweitig verwendet wird. Ihr muss kein Wert gegeben werden, man sollte es jedoch tun.

		Code: 
			Variablenklasse Variablenname = Wert;

		Variablenklasse:
			siehe Informatik_Java-Variablen.csv.
		
		Variablenname:
			beliegiger Name. Sollte eindeutig sein und mit einem kleinen Buchstaben beginnen. Man sollte sich auch für Camelcase, hungarian spelling, oder underline entscheiden. (variablenName, strVariablenName, variablen_name) Verwende eins.
			Es können nur alphanumerische Zeichen verwendet werden. ä, ö, ü und ß sollten nicht verwendet werden, auch wenn es funktionieren *kann*.
		
		Wert:
			Der Wert den die Variable haben soll. Muss eventuell auf bestimmte Art angegeben werden (Siehe Informatik_Java-Variablen.csv und Beispiele.)

	Wertzuweisung:
		Der Wert einer Variable kann geändert werden, wenn sie nicht mit "final" definiert wurde.

		code: Variablenname = Wert;

		Der Wert muss gegebenenfalls je nach Variablenklasse definiert werden.

	Beispiele:
		int zaehler = 10;
		string testText = "das ist ein Text. Er besteht aus einer aneinanderkettung von Char Variablen.";
		char character = 's';
		float gleitkommazahl = 1.9;
		gleitkommazahl = 2;
		double gleitkommazahl2 = 3.000;
		int anzahl = zaehler();


##### Funktionen #####
	Funktionen sind Einheiten, in denen Programmablauf gespeichert werden kann und erneut aufgerufen werden kann.
	Funktionen können Parameter enthalten. Diese funktionieren wie Variablen, deren Wert bei dem Aufruf festgelegt wird.

	Definition:
		Funktionen müssen wie Variablen definiert werden.
		Auch sie haben eine Klasse, hier wird sie aber oft Returntype genannt, da es die verständlichkeit vereinfacht.
		
		Code: 	Returntype Funktionsname(Parameterklasse Parametername, ...) {
					Funktionsblock/-Körper
					return Returnvariable; //optional bei Returntype "void". Wenn void: Returnvariable leer lassen, oder komplett weglassen.
				}

		Returntype:
			Eine Klasse wie bei den Variablenklassen inkl. "void". (Siehe Informatik_Java-Variablen.csv)
			Ist diese nicht auf "void" gesetzt, ist die Zeile "return Returnvariable" notwendig.
			Die Funktion gibt einen Wert dieser Klasse zurück. Das kann dafür verwendet werden einer Variable diesen Wert zuzuweisen.

		Funktionsname:
			Beliebeiger Name, identisch zu Variablenname.

		Parameterklasse & Parametername:
			Kann leer gelassen werden. Bsp: void Funktionsname(){return;}
			Wenn ein Parameter verwendet werden soll, muss dieser wie eine normale Variable deklariert werden, ohne einen Wert zu erhalten und ohne das nachfolgende ';'. Mehrere Parameter werden jeweils durch ein ',' getrennt.
			Beim Aufruf der Funktion müssen die Parameter in der selben Reihenfolge angegeben werden.
		
		Funktionsblock / Funktionskörper:
			Definiert den Code, der bei dem Aufruf der Funktion ausgeführt werden soll.
			Kann Variablendeklarationen, das Aufrufen weiterer Funktionen und vieles mehr enthalten.

		return:
			Das ausführen dieser Zeile beendet die Funktion.
			Sollte eine Variable folgen, wird diese zurückgegeben.
			Nur funktionen mit dem Returntype "void" müssen diese Zeile nicht verwenden, können jedoch immer noch mit "return;" die Funktion beenden.

	Aufruf:
		Bei dem Aufruf wird der zuvor definierte Code ausgeführt, mit den gegebenen Variablen.

		Code: Funktionsname(Parameter);

		Wenn die Funktion einen Resturntype hat, kann diese Funktion verwenden um einer Variable einen Wert zu geben.

		Code:
				float beispielVariable = beispielfunktion(3, 5);

	Beispiel:
				float beispielFunktion(int zaehler, int nenner) { return zaehler / nenner; }
				float beispielVariable = beispielfunktion(3, 5);
				// beispielVariable hat jetzt den Wert von 3/5.

				int countChars(string str) {
					int n;
					n = str.length();
					return n;
				}

				int chars = countChars("String.");
				// chars hat jetzt den Wert 7.


##### Berechnungen #####
	In allen Fällen hat x am Ende den Wert 2.

	x = 1+1;
	x = 1 + 1;
	x=1; x++;		// Variablenname++ 	ist equivalent zu	x=x+1.
	x=0; x+=2;		// Variablenname+=n	ist equivalent zu	x=x+n.
	x=2;

	In allen Fällen hat x am Ende den Wert -2.

	x = 1-3;
	x = 1 - 3;
	x=-1; x--;		// Variablenname++ 	ist equivalent zu	x=x-1.
	x=0; x-=2;		// Variablenname+=n	ist equivalent zu	x=x-n.
	x=-2;

	In allen Fällen hat x am Ende den Wert 15.

	x = 3*5;
	x = 3 * 5;
	x = 3; x*=5; 	// Variabllenname *= n	ist equivalent zu	x=x*n
	x = 15;

	In allen Fällen hat x am Ende den Wert 3.

	x = 15 / 5;
	x=15/5;
	x = 15; x/=5;	// Variablenname /= n	ist equivalent zu	x = x/n
	x = 3;


##### Bedingungen / Vergleiche #####
	(x und n sind hier Variablen, die beliebige Werte haben könnten.)
	
	Allgemein:
		x == n		ist wahr, wenn x den gleichen Wert wie n hat. (Funktioniert bei allen Variablenklassen.)
		true		ist immer wahr.
		false		ist immer falsch.
	
	Zahlenwerte vergleichen:
		x <  n		ist wahr, wenn x kleiner als n ist.
		x <= n 		ist wahr, wenn x kleiner oder gleich n ist.
		x == n		ist wahr, wenn x den gleichen Wert wie n hat.
		x >= n		ist wahr, wenn x größer oder gleich n ist.
		x >  n		ist wahr, wenn x größer als n ist.


##### Verzweigunen #####
	Ein Stück Code (if-/else-Block) wird nur ausgeführt wenn eine bestimmte Bedingung ausgeführt wird.
	
	If:
		code:	if ( Bedingung ) {
					if-Block
				}

	If-else:
		code:	if ( Bedingung ) {
					if-Block
				} else {
					else-Block
				}
	If-else-elif: 	später...
	case:			später...

	Beispiele:
		int counter = 13;
		if ( counter => 10 ) {
			System.out.println("Done.");
			return counter;
		} else {
			System.out.println("Not done yet.");
		}


##### Schleifen #####
	Grundstruktur
        Schleifenart (Schleifenkopf) {
            Schleifenkörper
        }
    
    while
		code:	while ( Bedingung ) {
					while-Block
				}
		Bedingung:
			Normale Bedingung, wie in einer if-Verzweigung.
			Wird vor jedem Durchlauf geprüft.

		while-Block:
			Auszuführender Code.
			Wird bei jedem Ablauf ausgeführt.

		Die Bedingung wird wie bei einer if-Verzweigung geprüft. Ist sie wahr, wird der while-Block ausgeführt.
		Ist das Ende Erreicht, wiederholt sich alles.

	for
		code:	for (Initialisierungsargument; Bedingung; Incrementierung) {
					for-Block
				}

		Initialisierungsargument:
			Ausgedachtes Wort, hab keinen Plan was richtig wäre.
			Ist eine normale deklaration einer Variable. Dieser Codeabschnitt wird einmalig ausgeführt.
		
		Bedingung:
			Eine Bedingung wie bei einer if-Verzweigung.

		Incrementierung:
			Dieser Codeabschnitt wird ein mal pro Durchlauf ausgeführt.
			Hier wird normalerweise die Variable aus dem Initialisieungsargument erhöht.

		for-Block:
			Auszuführender Code.
			Wird bei jedem Ablauf ausgeführt.

		Wird diese Schleife im Code erreicht, so wird zu erst das Initialisierungsargument (Hab ich  mir ausgedacht, kp wie man es sonst noch nennen könnte) ausgeführt.

##### später kommen vllt noch Klassen und ähnliches. #####
